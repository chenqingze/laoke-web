// source: Invitation.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Friend', null, global);
goog.exportSymbol('proto.FriendAck', null, global);
goog.exportSymbol('proto.FriendInvitationAcceptAck', null, global);
goog.exportSymbol('proto.FriendInvitationAcceptRequest', null, global);
goog.exportSymbol('proto.FriendInvitationAck', null, global);
goog.exportSymbol('proto.FriendInvitationDeclinedAck', null, global);
goog.exportSymbol('proto.FriendInvitationDeclinedRequest', null, global);
goog.exportSymbol('proto.FriendInvitationRequest', null, global);
goog.exportSymbol('proto.FriendInvitationRequestAck', null, global);
goog.exportSymbol('proto.FriendInvitationRequestRequest', null, global);
goog.exportSymbol('proto.FriendRequest', null, global);
goog.exportSymbol('proto.Invitation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Invitation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Invitation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Invitation.displayName = 'proto.Invitation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Friend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Friend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Friend.displayName = 'proto.Friend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendInvitationRequestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FriendInvitationRequestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendInvitationRequestRequest.displayName = 'proto.FriendInvitationRequestRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendInvitationRequestAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FriendInvitationRequestAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendInvitationRequestAck.displayName = 'proto.FriendInvitationRequestAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendInvitationAcceptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FriendInvitationAcceptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendInvitationAcceptRequest.displayName = 'proto.FriendInvitationAcceptRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendInvitationAcceptAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FriendInvitationAcceptAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendInvitationAcceptAck.displayName = 'proto.FriendInvitationAcceptAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendInvitationDeclinedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FriendInvitationDeclinedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendInvitationDeclinedRequest.displayName = 'proto.FriendInvitationDeclinedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendInvitationDeclinedAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FriendInvitationDeclinedAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendInvitationDeclinedAck.displayName = 'proto.FriendInvitationDeclinedAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendInvitationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FriendInvitationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendInvitationRequest.displayName = 'proto.FriendInvitationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendInvitationAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FriendInvitationAck.repeatedFields_, null);
};
goog.inherits(proto.FriendInvitationAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendInvitationAck.displayName = 'proto.FriendInvitationAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FriendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendRequest.displayName = 'proto.FriendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FriendAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FriendAck.repeatedFields_, null);
};
goog.inherits(proto.FriendAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FriendAck.displayName = 'proto.FriendAck';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Invitation.prototype.toObject = function(opt_includeInstance) {
  return proto.Invitation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Invitation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Invitation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requesterid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    requesteralias: jspb.Message.getFieldWithDefault(msg, 3, ""),
    requesternickname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    addresseeid: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    addresseealias: jspb.Message.getFieldWithDefault(msg, 6, ""),
    addresseenickname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    content: jspb.Message.getFieldWithDefault(msg, 8, ""),
    inviteStatus: jspb.Message.getFieldWithDefault(msg, 9, ""),
    inviteType: jspb.Message.getFieldWithDefault(msg, 10, ""),
    createdat: jspb.Message.getFieldWithDefault(msg, 11, 0),
    updatedat: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Invitation}
 */
proto.Invitation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Invitation;
  return proto.Invitation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Invitation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Invitation}
 */
proto.Invitation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRequesterid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesteralias(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesternickname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAddresseeid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddresseealias(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddresseenickname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteStatus(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteType(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatedat(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUpdatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Invitation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Invitation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Invitation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Invitation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequesterid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getRequesteralias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequesternickname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAddresseeid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getAddresseealias();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAddresseenickname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getInviteStatus();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getInviteType();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getUpdatedat();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Invitation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 requesterId = 2;
 * @return {string}
 */
proto.Invitation.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setRequesterid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional string requesterAlias = 3;
 * @return {string}
 */
proto.Invitation.prototype.getRequesteralias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setRequesteralias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string requesterNickname = 4;
 * @return {string}
 */
proto.Invitation.prototype.getRequesternickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setRequesternickname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 addresseeId = 5;
 * @return {string}
 */
proto.Invitation.prototype.getAddresseeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setAddresseeid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional string addresseeAlias = 6;
 * @return {string}
 */
proto.Invitation.prototype.getAddresseealias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setAddresseealias = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string addresseeNickname = 7;
 * @return {string}
 */
proto.Invitation.prototype.getAddresseenickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setAddresseenickname = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string content = 8;
 * @return {string}
 */
proto.Invitation.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string invite_status = 9;
 * @return {string}
 */
proto.Invitation.prototype.getInviteStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setInviteStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string invite_type = 10;
 * @return {string}
 */
proto.Invitation.prototype.getInviteType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setInviteType = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint64 createdAt = 11;
 * @return {number}
 */
proto.Invitation.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 updatedAt = 12;
 * @return {number}
 */
proto.Invitation.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Invitation} returns this
 */
proto.Invitation.prototype.setUpdatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Friend.prototype.toObject = function(opt_includeInstance) {
  return proto.Friend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Friend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Friend.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    friendid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    friendname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    alias: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isblocked: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ismute: jspb.Message.getFieldWithDefault(msg, 7, 0),
    isstickontop: jspb.Message.getFieldWithDefault(msg, 8, 0),
    createdat: jspb.Message.getFieldWithDefault(msg, 9, 0),
    updatedat: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Friend}
 */
proto.Friend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Friend;
  return proto.Friend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Friend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Friend}
 */
proto.Friend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFriendid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIsblocked(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIsmute(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIsstickontop(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreatedat(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpdatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Friend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Friend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Friend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Friend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFriendid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFriendname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsblocked();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getIsmute();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getIsstickontop();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getUpdatedat();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Friend.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Friend} returns this
 */
proto.Friend.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 userId = 2;
 * @return {number}
 */
proto.Friend.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Friend} returns this
 */
proto.Friend.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 friendId = 3;
 * @return {number}
 */
proto.Friend.prototype.getFriendid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Friend} returns this
 */
proto.Friend.prototype.setFriendid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string friendName = 4;
 * @return {string}
 */
proto.Friend.prototype.getFriendname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Friend} returns this
 */
proto.Friend.prototype.setFriendname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string alias = 5;
 * @return {string}
 */
proto.Friend.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Friend} returns this
 */
proto.Friend.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 isBlocked = 6;
 * @return {number}
 */
proto.Friend.prototype.getIsblocked = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Friend} returns this
 */
proto.Friend.prototype.setIsblocked = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 isMute = 7;
 * @return {number}
 */
proto.Friend.prototype.getIsmute = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Friend} returns this
 */
proto.Friend.prototype.setIsmute = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 isStickOnTop = 8;
 * @return {number}
 */
proto.Friend.prototype.getIsstickontop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Friend} returns this
 */
proto.Friend.prototype.setIsstickontop = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 createdAt = 9;
 * @return {number}
 */
proto.Friend.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Friend} returns this
 */
proto.Friend.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 updatedAt = 10;
 * @return {number}
 */
proto.Friend.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.Friend} returns this
 */
proto.Friend.prototype.setUpdatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendInvitationRequestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendInvitationRequestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendInvitationRequestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationRequestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addresseeid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    addresseealias: jspb.Message.getFieldWithDefault(msg, 3, ""),
    content: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendInvitationRequestRequest}
 */
proto.FriendInvitationRequestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendInvitationRequestRequest;
  return proto.FriendInvitationRequestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendInvitationRequestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendInvitationRequestRequest}
 */
proto.FriendInvitationRequestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAddresseeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddresseealias(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendInvitationRequestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendInvitationRequestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendInvitationRequestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationRequestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddresseeid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getAddresseealias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.FriendInvitationRequestRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestRequest} returns this
 */
proto.FriendInvitationRequestRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 addresseeId = 2;
 * @return {string}
 */
proto.FriendInvitationRequestRequest.prototype.getAddresseeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestRequest} returns this
 */
proto.FriendInvitationRequestRequest.prototype.setAddresseeid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional string addresseeAlias = 3;
 * @return {string}
 */
proto.FriendInvitationRequestRequest.prototype.getAddresseealias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestRequest} returns this
 */
proto.FriendInvitationRequestRequest.prototype.setAddresseealias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string content = 4;
 * @return {string}
 */
proto.FriendInvitationRequestRequest.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestRequest} returns this
 */
proto.FriendInvitationRequestRequest.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendInvitationRequestAck.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendInvitationRequestAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendInvitationRequestAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationRequestAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requesterid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    requesteralias: jspb.Message.getFieldWithDefault(msg, 3, ""),
    requesternickname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    addresseeid: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    addresseealias: jspb.Message.getFieldWithDefault(msg, 6, ""),
    addresseenickname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    content: jspb.Message.getFieldWithDefault(msg, 8, ""),
    inviteStatus: jspb.Message.getFieldWithDefault(msg, 9, ""),
    inviteType: jspb.Message.getFieldWithDefault(msg, 10, ""),
    createdat: jspb.Message.getFieldWithDefault(msg, 11, 0),
    updatedat: jspb.Message.getFieldWithDefault(msg, 12, 0),
    res: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendInvitationRequestAck}
 */
proto.FriendInvitationRequestAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendInvitationRequestAck;
  return proto.FriendInvitationRequestAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendInvitationRequestAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendInvitationRequestAck}
 */
proto.FriendInvitationRequestAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRequesterid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesteralias(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequesternickname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAddresseeid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddresseealias(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddresseenickname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteStatus(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteType(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatedat(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUpdatedat(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendInvitationRequestAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendInvitationRequestAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendInvitationRequestAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationRequestAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequesterid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getRequesteralias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequesternickname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAddresseeid();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getAddresseealias();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAddresseenickname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getInviteStatus();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getInviteType();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getUpdatedat();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getRes();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.FriendInvitationRequestAck.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 requesterId = 2;
 * @return {string}
 */
proto.FriendInvitationRequestAck.prototype.getRequesterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setRequesterid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional string requesterAlias = 3;
 * @return {string}
 */
proto.FriendInvitationRequestAck.prototype.getRequesteralias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setRequesteralias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string requesterNickname = 4;
 * @return {string}
 */
proto.FriendInvitationRequestAck.prototype.getRequesternickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setRequesternickname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 addresseeId = 5;
 * @return {string}
 */
proto.FriendInvitationRequestAck.prototype.getAddresseeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setAddresseeid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional string addresseeAlias = 6;
 * @return {string}
 */
proto.FriendInvitationRequestAck.prototype.getAddresseealias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setAddresseealias = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string addresseeNickname = 7;
 * @return {string}
 */
proto.FriendInvitationRequestAck.prototype.getAddresseenickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setAddresseenickname = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string content = 8;
 * @return {string}
 */
proto.FriendInvitationRequestAck.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string invite_status = 9;
 * @return {string}
 */
proto.FriendInvitationRequestAck.prototype.getInviteStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setInviteStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string invite_type = 10;
 * @return {string}
 */
proto.FriendInvitationRequestAck.prototype.getInviteType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setInviteType = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint64 createdAt = 11;
 * @return {number}
 */
proto.FriendInvitationRequestAck.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 updatedAt = 12;
 * @return {number}
 */
proto.FriendInvitationRequestAck.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setUpdatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint32 res = 13;
 * @return {number}
 */
proto.FriendInvitationRequestAck.prototype.getRes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.FriendInvitationRequestAck} returns this
 */
proto.FriendInvitationRequestAck.prototype.setRes = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendInvitationAcceptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendInvitationAcceptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendInvitationAcceptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationAcceptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendInvitationAcceptRequest}
 */
proto.FriendInvitationAcceptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendInvitationAcceptRequest;
  return proto.FriendInvitationAcceptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendInvitationAcceptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendInvitationAcceptRequest}
 */
proto.FriendInvitationAcceptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendInvitationAcceptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendInvitationAcceptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendInvitationAcceptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationAcceptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.FriendInvitationAcceptRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationAcceptRequest} returns this
 */
proto.FriendInvitationAcceptRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendInvitationAcceptAck.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendInvitationAcceptAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendInvitationAcceptAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationAcceptAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    friend: (f = msg.getFriend()) && proto.Friend.toObject(includeInstance, f),
    res: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendInvitationAcceptAck}
 */
proto.FriendInvitationAcceptAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendInvitationAcceptAck;
  return proto.FriendInvitationAcceptAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendInvitationAcceptAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendInvitationAcceptAck}
 */
proto.FriendInvitationAcceptAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Friend;
      reader.readMessage(value,proto.Friend.deserializeBinaryFromReader);
      msg.setFriend(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendInvitationAcceptAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendInvitationAcceptAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendInvitationAcceptAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationAcceptAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Friend.serializeBinaryToWriter
    );
  }
  f = message.getRes();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional Friend friend = 1;
 * @return {?proto.Friend}
 */
proto.FriendInvitationAcceptAck.prototype.getFriend = function() {
  return /** @type{?proto.Friend} */ (
    jspb.Message.getWrapperField(this, proto.Friend, 1));
};


/**
 * @param {?proto.Friend|undefined} value
 * @return {!proto.FriendInvitationAcceptAck} returns this
*/
proto.FriendInvitationAcceptAck.prototype.setFriend = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FriendInvitationAcceptAck} returns this
 */
proto.FriendInvitationAcceptAck.prototype.clearFriend = function() {
  return this.setFriend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FriendInvitationAcceptAck.prototype.hasFriend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 res = 10;
 * @return {number}
 */
proto.FriendInvitationAcceptAck.prototype.getRes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.FriendInvitationAcceptAck} returns this
 */
proto.FriendInvitationAcceptAck.prototype.setRes = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendInvitationDeclinedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendInvitationDeclinedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendInvitationDeclinedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationDeclinedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendInvitationDeclinedRequest}
 */
proto.FriendInvitationDeclinedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendInvitationDeclinedRequest;
  return proto.FriendInvitationDeclinedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendInvitationDeclinedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendInvitationDeclinedRequest}
 */
proto.FriendInvitationDeclinedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendInvitationDeclinedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendInvitationDeclinedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendInvitationDeclinedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationDeclinedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.FriendInvitationDeclinedRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationDeclinedRequest} returns this
 */
proto.FriendInvitationDeclinedRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendInvitationDeclinedAck.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendInvitationDeclinedAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendInvitationDeclinedAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationDeclinedAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    res: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendInvitationDeclinedAck}
 */
proto.FriendInvitationDeclinedAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendInvitationDeclinedAck;
  return proto.FriendInvitationDeclinedAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendInvitationDeclinedAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendInvitationDeclinedAck}
 */
proto.FriendInvitationDeclinedAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendInvitationDeclinedAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendInvitationDeclinedAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendInvitationDeclinedAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationDeclinedAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRes();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.FriendInvitationDeclinedAck.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FriendInvitationDeclinedAck} returns this
 */
proto.FriendInvitationDeclinedAck.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 res = 10;
 * @return {number}
 */
proto.FriendInvitationDeclinedAck.prototype.getRes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.FriendInvitationDeclinedAck} returns this
 */
proto.FriendInvitationDeclinedAck.prototype.setRes = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendInvitationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendInvitationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendInvitationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatedat: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendInvitationRequest}
 */
proto.FriendInvitationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendInvitationRequest;
  return proto.FriendInvitationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendInvitationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendInvitationRequest}
 */
proto.FriendInvitationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpdatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendInvitationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendInvitationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendInvitationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatedat();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 updatedAt = 1;
 * @return {number}
 */
proto.FriendInvitationRequest.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.FriendInvitationRequest} returns this
 */
proto.FriendInvitationRequest.prototype.setUpdatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FriendInvitationAck.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendInvitationAck.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendInvitationAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendInvitationAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    invitationList: jspb.Message.toObjectList(msg.getInvitationList(),
    proto.Invitation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendInvitationAck}
 */
proto.FriendInvitationAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendInvitationAck;
  return proto.FriendInvitationAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendInvitationAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendInvitationAck}
 */
proto.FriendInvitationAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Invitation;
      reader.readMessage(value,proto.Invitation.deserializeBinaryFromReader);
      msg.addInvitation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendInvitationAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendInvitationAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendInvitationAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendInvitationAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvitationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Invitation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Invitation invitation = 1;
 * @return {!Array<!proto.Invitation>}
 */
proto.FriendInvitationAck.prototype.getInvitationList = function() {
  return /** @type{!Array<!proto.Invitation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Invitation, 1));
};


/**
 * @param {!Array<!proto.Invitation>} value
 * @return {!proto.FriendInvitationAck} returns this
*/
proto.FriendInvitationAck.prototype.setInvitationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Invitation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Invitation}
 */
proto.FriendInvitationAck.prototype.addInvitation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Invitation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FriendInvitationAck} returns this
 */
proto.FriendInvitationAck.prototype.clearInvitationList = function() {
  return this.setInvitationList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatedat: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendRequest}
 */
proto.FriendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendRequest;
  return proto.FriendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendRequest}
 */
proto.FriendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpdatedat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatedat();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 updatedAt = 1;
 * @return {number}
 */
proto.FriendRequest.prototype.getUpdatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.FriendRequest} returns this
 */
proto.FriendRequest.prototype.setUpdatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FriendAck.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FriendAck.prototype.toObject = function(opt_includeInstance) {
  return proto.FriendAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FriendAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    invitationList: jspb.Message.toObjectList(msg.getInvitationList(),
    proto.Invitation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FriendAck}
 */
proto.FriendAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FriendAck;
  return proto.FriendAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FriendAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FriendAck}
 */
proto.FriendAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Invitation;
      reader.readMessage(value,proto.Invitation.deserializeBinaryFromReader);
      msg.addInvitation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FriendAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FriendAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FriendAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FriendAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvitationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Invitation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Invitation invitation = 1;
 * @return {!Array<!proto.Invitation>}
 */
proto.FriendAck.prototype.getInvitationList = function() {
  return /** @type{!Array<!proto.Invitation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Invitation, 1));
};


/**
 * @param {!Array<!proto.Invitation>} value
 * @return {!proto.FriendAck} returns this
*/
proto.FriendAck.prototype.setInvitationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Invitation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Invitation}
 */
proto.FriendAck.prototype.addInvitation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Invitation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FriendAck} returns this
 */
proto.FriendAck.prototype.clearInvitationList = function() {
  return this.setInvitationList([]);
};


goog.object.extend(exports, proto);
